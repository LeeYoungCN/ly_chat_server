# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-15]
        build_type: [Release, Debug]
        c_compiler: [gcc, clang, cl]
        include:
          # Windows + MSVC
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            generator: "Visual Studio 17 2022"  # MSVC默认生成器
          # Windows + GCC
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++  # 显式指定C++编译器
            generator: "MinGW Makefiles"  # 显式指定MinGW生成器
          # Ubuntu + GCC
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            generator: "Unix Makefiles"
          # Ubuntu + Clang
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            generator: "Unix Makefiles"
          # macOS + Clang
          - os: macos-15
            c_compiler: clang
            cpp_compiler: clang++
            generator: "Unix Makefiles"
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-15
            c_compiler: cl
          - os: macos-15
            c_compiler: gcc

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/out/build" >> "$GITHUB_OUTPUT"
        echo "build-install-dir=${{ github.workspace }}/out/install" >> "$GITHUB_OUTPUT"

    - name: Update MinGW via MSYS2 (Windows GCC only)
      if: matrix.os == 'windows-latest' && matrix.c_compiler == 'gcc'
      run: |
        # 1. 启动 MSYS2 终端并更新包数据库（仅更新必要的索引）
        C:\msys64\usr\bin\bash -lc "pacman -Sy --noconfirm"

        # 2. 升级 MinGW 64位 GCC 工具链（包含 g++、标准库等）
        C:\msys64\usr\bin\bash -lc "pacman -S --noconfirm mingw-w64-x86_64-gcc"

        # 3. （可选）升级配套工具（如 make、gdb，按需添加）
        C:\msys64\usr\bin\bash -lc "pacman -S --noconfirm mingw-w64-x86_64-make mingw-w64-x86_64-gdb"

        # 4. 将 MinGW 路径添加到环境变量（确保优先使用）
        echo "C:\msys64\mingw64\bin" >> $env:GITHUB_PATH
        echo "$mingwPath" >> $env:GITHUB_PATH

    - name: Configure CMake
      working-directory: ${{ github.workspace }}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -G "${{ matrix.generator }}"  # 使用显式生成器
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_INSTALL_PREFIX=${{ steps.strings.outputs.build-install-dir }}
        -DENABLE_ASAN=ON
        -S ${{ github.workspace }}

    - name: Build
      working-directory: ${{ github.workspace }}
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Install
      working-directory: ${{ github.workspace }}
      run: cmake --install ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --component runtime

    - name: Test
      working-directory: ${{ github.workspace }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --test-dir ${{ steps.strings.outputs.build-output-dir }} --build-config ${{ matrix.build_type }}  --tests-regex ^TEST_ALL$ -V

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4  # 升级到v4版本
      with:
        name: ${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}-build
        path: ${{ steps.strings.outputs.build-install-dir }}
        # v4版本新增的可选配置（根据需要添加）
        if-no-files-found: warn  # 无文件时警告而非失败
        retention-days: 7  #  artifacts保留7天
